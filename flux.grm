
fun listToTuple (x::[]) = x
  | listToTuple (x::rest) =
      let
        val r = listToTuple rest
        val (left, _) = AST.getExpressionRegion x
        val (_, right) = AST.getExpressionRegion r
      in
        AST.Binary { region = (left, right), operator = AST.TUPLE, left = x, right = r }
      end
  | listToTuple _ = raise Utils.ShouldNotGetHere

%%

%name Flux

%term
      ID of string
    | METHOD
    | TYPE
    | FIELD
    | OBJECT
    | LOCAL
    | ABSTRACT
    | IMMUTABLE
    | MUTABLE
    | BUILTIN
    | RETURN
    | YIELD
    | IF
    | ELSE
    | LOOP
    | SWITCH
    | CASE
    | BREAK
    | CONTINUE
    | INTEGER of int
    | FLOAT of real
    | STRING of string
    | SEMICOLON
    | COLON
    | LPAREN
    | RPAREN
    | LBRACE
    | RBRACE
    | LANGLE
    | RANGLE
    | ASSIGN
    | COLONASSIGN
    | AND
    | OR
    | PLUS
    | MINUS
    | MUL
    | DIV
    | MOD
    | LTEQ
    | GTEQ
    | EQ
    | NEQ
    | DOT
    | COMMA
    | EOF

%left COMMA
%left OR
%left AND
%left EQ NEQ
%left LTEQ GTEQ
%left MUL DIV MOD
%left PLUS MINUS
%left DOT

%nonterm
      program                           of AST.definition list
    | definition_list                   of AST.definition list
    | definition_list_opt               of AST.definition list
    | definition                        of AST.definition
    | non_type_definition_type          of AST.definitionType
    | type_definition_body              of AST.expressionOrStatementBlock option
    | definition_body                   of AST.expressionOrStatementBlock option
    | modifier_list_opt                 of AST.modifier list
    | modifier_list                     of AST.modifier list
    | modifier                          of AST.modifier
    | type_parameter_list_opt           of AST.definition list
    | value_parameter_list_opt          of AST.definition list
    | parameter_list_inner_opt          of AST.definition list
    | parameter_list                    of AST.definition list
    | parameter                         of AST.definition
    | type_expr_opt                     of AST.expression option
    | type_expr                         of AST.expression
    | type_args_opt                     of AST.expression list
    | type_expr_list                    of AST.expression list
    | statement_list_opt                of AST.statement list
    | statement_list                    of AST.statement list
    | statement                         of AST.statement
    | switch_case_block_list_opt        of AST.caseBlock list
    | switch_case_block_list            of AST.caseBlock list
    | switch_case_block                 of AST.caseBlock
    | value_expr_opt                    of AST.expression option
    | value_expr                        of AST.expression
	| name_expr							of AST.expression
    | tuple_value_expr                  of AST.expression
    | value_expr_list                   of AST.expression list
    | paren_value_expr                  of AST.expression
    | identifier                        of AST.identifier

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%value ID ("<error>")
%value INTEGER (0)
%value FLOAT (0.0)
%value STRING ("")

%%

program
    : definition_list_opt                   (definition_list_opt)

definition_list_opt
    :                                       ([])
    | definition_list                       (List.rev definition_list)

definition_list
    : definition                            ([definition])
    | definition_list definition            (definition::definition_list)

definition
    : modifier_list_opt TYPE identifier type_parameter_list_opt value_parameter_list_opt type_expr_opt type_definition_body
                                            (AST.Definition { region = (TYPEleft, type_definition_bodyright), defType = AST.Type, typeParameters = type_parameter_list_opt, valueParameters = value_parameter_list_opt, typeExpr = type_expr_opt, modifiers = modifier_list_opt, name = SOME identifier, body = type_definition_body })
    | modifier_list_opt non_type_definition_type identifier type_parameter_list_opt value_parameter_list_opt type_expr_opt definition_body
                                            (AST.Definition { region = (non_type_definition_typeleft, definition_bodyright), defType = non_type_definition_type, typeParameters = type_parameter_list_opt, valueParameters = value_parameter_list_opt, typeExpr = type_expr_opt, modifiers = modifier_list_opt, name = SOME identifier, body = definition_body })

non_type_definition_type
    : METHOD                                (AST.Method)
    | OBJECT                                (AST.Object)
    | FIELD                                 (AST.Field)

type_definition_body
    : SEMICOLON                             (NONE)
    | ASSIGN type_expr SEMICOLON             (SOME (AST.Expression type_expr))

definition_body
    : SEMICOLON                             (NONE)
    | LBRACE statement_list_opt RBRACE      (SOME (AST.Statement statement_list_opt))
    | ASSIGN value_expr SEMICOLON            (SOME (AST.Expression value_expr))

modifier_list_opt
    :                                       ([])
    | modifier_list                         (List.rev modifier_list)

modifier_list
    : modifier                              ([modifier])
    | modifier_list modifier                (modifier::modifier_list)

modifier
    : ABSTRACT                              (AST.Abstract (ABSTRACTleft, ABSTRACTright))
    | IMMUTABLE                             (AST.Immutable (IMMUTABLEleft, IMMUTABLEright))
    | MUTABLE                               (AST.Mutable (MUTABLEleft, MUTABLEright))
    | BUILTIN                               (AST.Builtin (BUILTINleft, BUILTINright))

type_parameter_list_opt
    :                                       ([])
    | LANGLE parameter_list_inner_opt RANGLE
                                            (parameter_list_inner_opt)

value_parameter_list_opt
    :                                       ([])
    | LPAREN parameter_list_inner_opt RPAREN
                                            (parameter_list_inner_opt)

parameter_list_inner_opt
    :                                       ([])
    | parameter_list                        (List.rev parameter_list)

parameter_list
    : parameter								([parameter])
    | parameter_list COMMA parameter        (parameter::parameter_list)

parameter
    : modifier_list_opt type_expr
                                            (AST.Definition { region = (case modifier_list_opt of [] => type_exprleft | _ => modifier_list_optleft, type_exprright), modifiers = modifier_list_opt, defType = AST.Local, typeParameters = [], valueParameters = [], typeExpr = SOME type_expr, name = NONE, body = NONE })
    | modifier_list_opt identifier type_expr_opt
                                            (AST.Definition { region = (case modifier_list_opt of [] => identifierleft | _ => modifier_list_optleft, case type_expr_opt of NONE => identifierright | _ => type_expr_optright), modifiers = modifier_list_opt, defType = AST.Local, typeParameters = [], valueParameters = [], typeExpr = type_expr_opt, name = SOME identifier, body = NONE })

type_expr_opt
    :                                       (NONE)
    | COLON type_expr                       (SOME type_expr)

type_expr
    : name_expr								(name_expr)
    | type_expr AND type_expr               (AST.Binary { region = (type_expr1left, type_expr2right), operator = AST.AND, left = type_expr1, right = type_expr2 })
    | type_expr OR type_expr                (AST.Binary { region = (type_expr1left, type_expr2right), operator = AST.OR, left = type_expr1, right = type_expr2 })
    | LPAREN type_expr RPAREN               (type_expr)
    | MUTABLE type_expr                     (AST.Unary { region = (MUTABLEleft, type_exprright), operator = AST.MUTABLE, expr = type_expr })
    | IMMUTABLE type_expr                   (AST.Unary { region = (IMMUTABLEleft, type_exprright), operator = AST.IMMUTABLE, expr = type_expr })

type_args_opt
    :                                       ([])
    | LANGLE type_expr_list RANGLE          (List.rev type_expr_list)

type_expr_list
    : type_expr                             ([type_expr])
    | type_expr_list type_expr              (type_expr::type_expr_list)

statement_list_opt
    :                                       ([])
    | statement_list                        (List.rev statement_list)

statement_list
    : statement                             ([statement])
    | statement_list statement              (statement::statement_list)

statement
    : RETURN value_expr_opt SEMICOLON       (AST.Return { region = (RETURNleft, SEMICOLONright), value = value_expr_opt })
    | IF LPAREN value_expr RPAREN statement (AST.If { region = (IFleft, statementright), condition = value_expr, trueBranch = statement, falseBranch = NONE })
    | IF LPAREN value_expr RPAREN statement ELSE statement
                                            (AST.If { region = (IFleft, statement2right), condition = value_expr, trueBranch = statement1, falseBranch = SOME statement2 })
    | SWITCH LPAREN value_expr RPAREN LBRACE switch_case_block_list_opt RBRACE
                                            (AST.Switch { region = (SWITCHleft, RBRACEright), value = value_expr, branches = switch_case_block_list_opt })
    | LOCAL identifier COLON type_expr value_expr_opt SEMICOLON
                                            (AST.Variable (AST.Definition { region = (LOCALleft, SEMICOLONright), modifiers = [], defType = AST.Local, typeParameters = [], valueParameters = [], typeExpr = SOME type_expr, name = SOME identifier, body = NONE }))
    | LOCAL identifier COLON type_expr ASSIGN value_expr SEMICOLON
                                            (AST.Variable (AST.Definition { region = (LOCALleft, SEMICOLONright), modifiers = [], defType = AST.Local, typeParameters = [], valueParameters = [], typeExpr = SOME type_expr, name = SOME identifier, body = SOME (AST.Expression value_expr) }))
    | LOCAL identifier COLONASSIGN value_expr SEMICOLON
                                            (AST.Variable (AST.Definition { region = (LOCALleft, SEMICOLONright), modifiers = [], defType = AST.Local, typeParameters = [], valueParameters = [], typeExpr = NONE, name = SOME identifier, body = SOME (AST.Expression value_expr) }))
    | value_expr SEMICOLON                  (AST.ExpressionStatement (value_expr))

switch_case_block_list_opt
    :                                       ([])
    | switch_case_block_list                (List.rev switch_case_block_list)

switch_case_block_list
    : switch_case_block                     ([switch_case_block])
    | switch_case_block_list switch_case_block
                                            (switch_case_block::switch_case_block_list)

switch_case_block
    : CASE value_expr_list COLON statement_list_opt
                                            (AST.Case { region = (CASEleft, statement_list_optright), values = List.rev value_expr_list, body = statement_list_opt })

value_expr_opt
    :                                       (NONE)
    | value_expr                            (SOME value_expr)

value_expr
    : paren_value_expr                      (paren_value_expr)
    | INTEGER                               (AST.Integer { region = (INTEGERleft, INTEGERright), value = INTEGER })
    | FLOAT                                 (AST.Float { region = (FLOATleft, FLOATright), value = FLOAT })
    | STRING                                (AST.String { region = (STRINGleft, STRINGright), value = STRING })
    | name_expr								(name_expr)
    | value_expr PLUS value_expr            (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.PLUS, left = value_expr1, right = value_expr2 })
    | value_expr MINUS value_expr           (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.MINUS, left = value_expr1, right = value_expr2 })
    | value_expr MUL value_expr             (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.MUL, left = value_expr1, right = value_expr2 })
    | value_expr DIV value_expr             (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.DIV, left = value_expr1, right = value_expr2 })
    | value_expr MOD value_expr             (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.MOD, left = value_expr1, right = value_expr2 })
    | value_expr LANGLE value_expr          (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.LT, left = value_expr1, right = value_expr2 })
    | value_expr RANGLE value_expr          (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.GT, left = value_expr1, right = value_expr2 })
    | value_expr LTEQ value_expr            (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.LTEQ, left = value_expr1, right = value_expr2 })
    | value_expr GTEQ value_expr            (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.GTEQ, left = value_expr1, right = value_expr2 })
    | value_expr EQ value_expr              (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.EQ, left = value_expr1, right = value_expr2 })
    | value_expr NEQ value_expr             (AST.Binary { region = (value_expr1left, value_expr2right), operator = AST.NEQ, left = value_expr1, right = value_expr2 })
    | value_expr DOT name_expr              (AST.Binary { region = (value_exprleft, name_exprright), operator = AST.DOT, left = value_expr, right = name_expr })
    | value_expr paren_value_expr           (AST.Binary { region = (value_exprleft, paren_value_exprright), operator = AST.APPLY, left = value_expr, right = paren_value_expr })

name_expr
    : identifier type_args_opt              (case type_args_opt of [] => AST.Name identifier | l => AST.Binary { region = (identifierleft, type_args_optright), operator = AST.TYPE_APPLY, left = AST.Name identifier, right = listToTuple type_args_opt })

paren_value_expr
    : LPAREN RPAREN                         (AST.Nothing { region = (LPARENleft, RPARENright) })
    | LPAREN value_expr RPAREN              (value_expr)
    | LPAREN value_expr COMMA tuple_value_expr RPAREN
                                            (AST.Binary { region = (LPARENleft, RPARENright), operator = AST.TUPLE, left = value_expr, right = tuple_value_expr })
tuple_value_expr
    : value_expr                            (value_expr)
    | value_expr COMMA tuple_value_expr     (AST.Binary { region = (value_exprleft, tuple_value_exprright), operator = AST.TUPLE, left = value_expr, right = tuple_value_expr })

value_expr_list
    : value_expr                            ([value_expr])
    | value_expr COMMA value_expr_list      (value_expr::value_expr_list)

identifier
    : ID                                    (AST.Identifier { region = (IDleft, IDright), text = ID })

